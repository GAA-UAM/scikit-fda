#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# scikit-fda documentation build configuration file, created by
# sphinx-quickstart on Sun Oct 22 18:46:59 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
from __future__ import annotations

import inspect
import os
import sys
import warnings
from os.path import dirname, relpath
from typing import Callable, Mapping

import pkg_resources
# Patch sphinx_gallery.binder.gen_binder_rst so as to point to .py file in
# repository
import sphinx_gallery.interactive_example
from sphinx.errors import ConfigError
# -- Extensions to the  Napoleon GoogleDocstring class ---------------------
from sphinx.ext.napoleon.docstring import GoogleDocstring
from sphinx_gallery.sorting import ExampleTitleSortKey, ExplicitOrder

import skfda

# General information about the project.
project = "scikit-fda"
package_name = "skfda"
author = "Grupo de Aprendizaje Automático"
copyright = (
    "2019, Grupo de Aprendizaje Automático - "
    "Universidad Autónoma de Madrid"
)
github_url = "https://github.com/GAA-UAM/scikit-fda"
rtd_version = os.environ.get("READTHEDOCS_VERSION")
rtd_version_type = os.environ.get("READTHEDOCS_VERSION_TYPE")

switcher_version = rtd_version
if switcher_version == "latest":
    switcher_version = "dev"
elif rtd_version_type not in {"branch", "tag"}:
    switcher_version = skfda.__version__

rtd_branch = os.environ.get(" READTHEDOCS_GIT_IDENTIFIER", "develop")
language = "en"

try:
    release = pkg_resources.get_distribution(project).version
except pkg_resources.DistributionNotFound:
    print(
        f"To build the documentation, The distribution information of\n"
        f"{project} has to be available.  Either install the package\n"
        f"into your development environment or run 'setup.py develop'\n"
        f"to setup the metadata.  A virtualenv is recommended!\n",
    )
    sys.exit(1)
del pkg_resources

version = ".".join(release.split(".")[:2])

# -- General configuration --

# Minimal version supported
needs_sphinx = "3.0"

# Sphinx extensions
extensions = [
    "jupyter_sphinx",
    "myst_parser",
    "sphinx.ext.autodoc",
    "sphinx.ext.autodoc.typehints",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.linkcode",
    "sphinx.ext.mathjax",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx_gallery.gen_gallery",
    "sphinxcontrib.bibtex",
]

# Paths for templates
templates_path = ["_templates"]

# Suffix(es) of source filenames.
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"


# -- Options for HTML output --

html_theme = "pydata_sphinx_theme"
html_logo = "logo.png"

html_theme_options = {
    "use_edit_page_button": True,
    "github_url": github_url,
    "switcher": {
        "json_url": (
            "https://fda.readthedocs.io/en/latest/_static/switcher.json"
        ),
        "version_match": switcher_version,
    },
    "show_version_warning_banner": True,
    "navbar_start": ["navbar-logo", "version-switcher"],
    "icon_links": [
        {
            "name": "PyPI",
            "url": "https://pypi.org/project/scikit-fda",
            "icon": "https://avatars.githubusercontent.com/u/2964877",
            "type": "url",
        },
        {
            "name": "Anaconda",
            "url": "https://anaconda.org/conda-forge/scikit-fda",
            "icon": "https://avatars.githubusercontent.com/u/3571983",
            "type": "url",
        },
    ],
    "logo": {
        "image_light": html_logo,
        "image_dark": html_logo,
    },
}

html_context = {
    "github_user": "GAA-UAM",
    "github_repo": "scikit-fda",
    "github_version": "develop",
    "doc_path": "docs",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# -- Options for LaTeX output --

latex_engine = "lualatex"

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, f"{package_name}.tex",
     "scikit-fda documentation", author, "manual"),
]

# -- Options for manual page output --

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "skfda", "scikit-fda documentation", [author], 1),
]

# -- Options for Texinfo output --
# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "skfda",
        "scikit-fda documentation",
        author,
        "skfda",
        "Functional data analysis in Python.",
        "Miscellaneous",
    ),
]

# -- Options for Epub output --

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ""

# A unique identification for the text.
#
# epub_uid = ""

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]

# -- Extension options --
# -- Options for sphinx.ext.autodoc --

autodoc_default_flags = ["members", "inherited-members"]

# -- Options for "sphinx.ext.autodoc.typehints" --

autodoc_typehints = "description"
autodoc_type_aliases = {
    "ArrayLike": "ArrayLike",
    "GridPointsLike": "Union[ArrayLike, Sequence[ArrayLike]]",
}

# -- Options for "sphinx.ext.autosummary" --

autosummary_generate = True

# -- Options for "sphinx.ext.doctest" --

doctest_global_setup = """
import numpy as np
np.set_printoptions(legacy="1.13")
"""

# -- Options for "sphinx.ext.intersphinx" --

intersphinx_mapping = {
    "matplotlib": ("https://matplotlib.org/stable", None),
    "numpy": ("https://numpy.org/doc/stable", None),
    "pandas": ("https://pandas.pydata.org/pandas-docs/stable", None),
    "python": (f"https://docs.python.org/{sys.version_info.major}", None),
    "scipy": ("https://docs.scipy.org/doc/scipy", None),
    "sklearn": ("https://scikit-learn.org/stable", None),
}

# -- Options for "sphinx.ext.linkcode" --


def linkcode_resolve(domain: str, info: Mapping[str, str]) -> str | None:
    """
    Resolve a link to source in the Github repo.

    Based on the NumPy version.
    """
    if domain != "py":
        return None

    modname = info["module"]
    fullname = info["fullname"]

    submod = sys.modules.get(modname)
    if submod is None:
        return None

    obj = submod
    for part in fullname.split("."):
        try:
            obj = getattr(obj, part)
        except Exception:
            return None

    fn = None
    lineno = None

    try:
        fn = inspect.getsourcefile(obj)
    except Exception:
        fn = None
    if not fn:
        return None

    # Ignore re-exports as their source files are not within the skfda repo
    module = inspect.getmodule(obj)
    if module is not None and not module.__name__.startswith("skfda"):
        return None

    try:
        source, lineno = inspect.getsourcelines(obj)
        lineno_final = lineno + len(source) - 1
    except Exception:
        lineno_final = None

    fn = relpath(fn, start=dirname(skfda.__file__))

    if lineno:
        linespec = f"#L{lineno}-L{lineno_final}"
    else:
        linespec = ""

    return f"{github_url}/tree/{rtd_branch}/skfda/{fn}{linespec}"

# -- Options for "sphinx.ext.mathjax" --


# -- Options for "sphinx.ext.napoleon" --

napoleon_use_rtype = True


# Napoleon fix for attributes
# Taken from
# https://michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html


# first, we define new methods for any new sections and add them to the class


def parse_keys_section(self, section):
    return self._format_fields("Keys", self._consume_fields())


GoogleDocstring._parse_keys_section = parse_keys_section


def parse_attributes_section(self, section):
    return self._format_fields("Attributes", self._consume_fields())


GoogleDocstring._parse_attributes_section = parse_attributes_section


def parse_class_attributes_section(self, section):
    return self._format_fields("Class Attributes", self._consume_fields())


GoogleDocstring._parse_class_attributes_section = parse_class_attributes_section

# we now patch the parse method to guarantee that the the above methods are
# assigned to the _section dict


def patched_parse(self):
    self._sections["keys"] = self._parse_keys_section
    self._sections["class attributes"] = self._parse_class_attributes_section
    self._unpatched_parse()


GoogleDocstring._unpatched_parse = GoogleDocstring._parse
GoogleDocstring._parse = patched_parse

# -- Options for "sphinx.ext.todo" --

todo_include_todos = True

# -- Options for "sphinx_gallery.gen_gallery" --

tutorial_list = [
    "plot_introduction.py",
    "plot_getting_data.py",
    "plot_basis_representation.py",
    "plot_skfda_sklearn.py",
]

OrderType = Callable[[str], str]


class SkfdaExplicitSubOrder(object):
    """
    Class for use within the "within_subsection_order" key.

    Inspired by Matplotlib gallery.

    """

    def __init__(self, src_dir: str) -> None:
        self.tutorial_order: OrderType = ExplicitOrder(tutorial_list)
        self.title_order: OrderType = ExampleTitleSortKey(src_dir)

    def __call__(self, filename: str) -> str:
        """Return a string determining the sort order."""
        try:
            return self.tutorial_order(filename)
        except ConfigError:
            return self.title_order(filename)

    def __repr__(self) -> str:
        return f"{self.__class__.__name__}()"


sphinx_gallery_conf = {
    "examples_dirs": ["../examples", "../tutorial"],
    "gallery_dirs": ["auto_examples", "auto_tutorial"],
    "reference_url": {
        "skfda": None,
    },
    "backreferences_dir": "backreferences",
    "doc_module": "skfda",
    "within_subsection_order": SkfdaExplicitSubOrder,
    "binder": {
        "org": "GAA-UAM",
        "repo": "scikit-fda",
        "branch": rtd_branch,
        "binderhub_url": "https://mybinder.org",
        "dependencies": ["../binder/requirements.txt"],
        "notebooks_dir": "../examples",
    },
    "matplotlib_animations": True,
}

warnings.filterwarnings(
    "ignore",
    category=UserWarning,
    message="Matplotlib is currently using agg, which is a"
    " non-GUI backend, so cannot show the figure.",
)


# Binder integration
# Taken from
# https://stanczakdominik.github.io/posts/simple-binder-usage-with-sphinx-gallery-through-jupytext/
original_gen_binder_rst = sphinx_gallery.interactive_example.gen_binder_rst


def patched_gen_binder_rst(*args, **kwargs):
    original_rst = original_gen_binder_rst(*args, **kwargs)
    return original_rst.replace(
        "../examples/auto_",
        "",
    ).replace(
        ".ipynb",
        ".py",
    )


#  # And then we finish our monkeypatching misdeed by redirecting

# sphinx-gallery to use our function:
sphinx_gallery.interactive_example.gen_binder_rst = patched_gen_binder_rst
sphinx_gallery.gen_rst.gen_binder_rst = patched_gen_binder_rst

# -- Options for "sphinxcontrib.bibtex" --

bibtex_bibfiles = ["refs.bib"]
